// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
pub type Operation = vscode::example::types::Operation;
#[allow(unused_unsafe, clippy::all)]
pub fn generate() -> _rt::String {
	unsafe {
		#[repr(align(4))]
		struct RetArea([::core::mem::MaybeUninit<u8>; 8]);

		let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);

		let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
		#[cfg(target_arch = "wasm32")]
		#[link(wasm_import_module = "$root")]
		extern {
			#[link_name = "generate"]
			fn wit_import(_:*mut u8);
		}

		#[cfg(not(target_arch = "wasm32"))]
		fn wit_import(_:*mut u8) { unreachable!() }

		wit_import(ptr0);

		let l1 = *ptr0.add(0).cast::<*mut u8>();

		let l2 = *ptr0.add(4).cast::<usize>();

		let len3 = l2;

		let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

		_rt::string_lift(bytes3)
	}
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_calc_cabi<T:Guest>(arg0:i32, arg1:i32, arg2:i32) -> i32 {
	#[cfg(target_arch = "wasm32")]
	_rt::run_ctors_once();

	use vscode::example::types::Operation as V0;

	let v0 = match arg0 {
		0 => {
			let e0 = vscode::example::types::Operands { left:arg1 as u32, right:arg2 as u32 };

			V0::Add(e0)
		},
		1 => {
			let e0 = vscode::example::types::Operands { left:arg1 as u32, right:arg2 as u32 };

			V0::Sub(e0)
		},
		2 => {
			let e0 = vscode::example::types::Operands { left:arg1 as u32, right:arg2 as u32 };

			V0::Mul(e0)
		},
		n => {
			debug_assert_eq!(n, 3, "invalid enum discriminant");

			let e0 = vscode::example::types::Operands { left:arg1 as u32, right:arg2 as u32 };

			V0::Div(e0)
		},
	};

	let result1 = T::calc(v0);

	_rt::as_i32(result1)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_msg_cabi<T:Guest>() -> *mut u8 {
	#[cfg(target_arch = "wasm32")]
	_rt::run_ctors_once();

	let result0 = T::msg();

	let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();

	let vec2 = (result0.into_bytes()).into_boxed_slice();

	let ptr2 = vec2.as_ptr().cast::<u8>();

	let len2 = vec2.len();
	::core::mem::forget(vec2);
	*ptr1.add(4).cast::<usize>() = len2;
	*ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();

	ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_msg<T:Guest>(arg0:*mut u8) {
	let l0 = *arg0.add(0).cast::<*mut u8>();

	let l1 = *arg0.add(4).cast::<usize>();

	_rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
	fn calc(o:Operation) -> u32;

	fn msg() -> _rt::String;
}
#[doc(hidden)]

macro_rules! __export_world_calculator_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "calc"]
    unsafe extern "C" fn export_calc(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
      $($path_to_types)*::_export_calc_cabi::<$ty>(arg0, arg1, arg2)
    }
    #[export_name = "msg"]
    unsafe extern "C" fn export_msg() -> *mut u8 {
      $($path_to_types)*::_export_msg_cabi::<$ty>()
    }
    #[export_name = "cabi_post_msg"]
    unsafe extern "C" fn _post_return_msg(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_msg::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_calculator_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
static mut _RET_AREA:_RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
#[allow(dead_code)]
pub mod vscode {
	#[allow(dead_code)]
	pub mod example {
		#[allow(dead_code, clippy::all)]
		pub mod types {
			#[used]
			#[doc(hidden)]
			#[cfg(target_arch = "wasm32")]
			static __FORCE_SECTION_REF:fn() =
				super::super::super::__link_custom_section_describing_imports;
			#[repr(C)]
			#[derive(Clone, Copy)]
			pub struct Operands {
				pub left:u32,
				pub right:u32,
			}

			impl ::core::fmt::Debug for Operands {
				fn fmt(&self, f:&mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
					f.debug_struct("Operands")
						.field("left", &self.left)
						.field("right", &self.right)
						.finish()
				}
			}
			#[derive(Clone, Copy)]
			pub enum Operation {
				Add(Operands),
				Sub(Operands),
				Mul(Operands),
				Div(Operands),
			}

			impl ::core::fmt::Debug for Operation {
				fn fmt(&self, f:&mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
					match self {
						Operation::Add(e) => f.debug_tuple("Operation::Add").field(e).finish(),
						Operation::Sub(e) => f.debug_tuple("Operation::Sub").field(e).finish(),
						Operation::Mul(e) => f.debug_tuple("Operation::Mul").field(e).finish(),
						Operation::Div(e) => f.debug_tuple("Operation::Div").field(e).finish(),
					}
				}
			}
		}
	}
}
mod _rt {
	pub use alloc_crate::{string::String, vec::Vec};

	pub unsafe fn string_lift(bytes:Vec<u8>) -> String {
		if cfg!(debug_assertions) {
			String::from_utf8(bytes).unwrap()
		} else {
			String::from_utf8_unchecked(bytes)
		}
	}

	#[cfg(target_arch = "wasm32")]
	pub fn run_ctors_once() { wit_bindgen::rt::run_ctors_once(); }

	pub fn as_i32<T:AsI32>(t:T) -> i32 { t.as_i32() }

	pub trait AsI32 {
		fn as_i32(self) -> i32;
	}

	impl<'a, T:Copy + AsI32> AsI32 for &'a T {
		fn as_i32(self) -> i32 { (*self).as_i32() }
	}

	impl AsI32 for i32 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for u32 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for i16 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for u16 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for i8 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for u8 {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for char {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	impl AsI32 for usize {
		#[inline]
		fn as_i32(self) -> i32 { self as i32 }
	}

	pub unsafe fn cabi_dealloc(ptr:*mut u8, size:usize, align:usize) {
		if size == 0 {
			return;
		}

		let layout = alloc::Layout::from_size_align_unchecked(size, align);

		alloc::dealloc(ptr as *mut u8, layout);
	}

	extern crate alloc as alloc_crate;

	pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
/// 	// ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_calculator_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_calculator_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_calculator_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:calculator:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE:[u8; 341] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd4\x01\x01A\x02\x01\
A\x09\x01B\x04\x01r\x02\x04lefty\x05righty\x04\0\x08operands\x03\0\0\x01q\x04\x03\
add\x01\x01\0\x03sub\x01\x01\0\x03mul\x01\x01\0\x03div\x01\x01\0\x04\0\x09operat\
ion\x03\0\x02\x03\x01\x14vscode:example/types\x05\0\x02\x03\0\0\x09operation\x03\
\0\x09operation\x03\0\x01\x01@\0\0s\x03\0\x08generate\x01\x03\x01@\x01\x01o\x02\0\
y\x04\0\x04calc\x01\x04\x04\0\x03msg\x01\x03\x04\x01\x19vscode:example/calculato\
r\x04\0\x0b\x10\x01\0\x0acalculator\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() { wit_bindgen::rt::maybe_link_cabi_realloc(); }
